<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | tchikuba's blog]]></title>
  <link href="https://tchikuba.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="https://tchikuba.github.io/"/>
  <updated>2020-08-07T20:51:12+09:00</updated>
  <id>https://tchikuba.github.io/</id>
  <author>
    <name><![CDATA[tchikuba]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[td-clientを使ってHiveより早いPrestoクエリを実行する方法をrakeタスクで]]></title>
    <link href="https://tchikuba.github.io/blog/2015/05/20/how-to-execute-presto-query-on-tresuredata-client/"/>
    <updated>2015-05-20T20:05:22+09:00</updated>
    <id>https://tchikuba.github.io/blog/2015/05/20/how-to-execute-presto-query-on-tresuredata-client</id>
    <content type="html"><![CDATA[<p>最近、Hadoop(Tresure Data)と格闘してます。</p>

<p>td-clientを使ってTresureDataからデータを取得するrakeタスクを書いててHiveクエリだと遅いのでPresto使いたいなと思うことがありました。
td-clientのREADMEなど公式情報をざっと確認したところ見当たりませんでしたが、
td-client-rubyのソースコードを見たら案の定クエリタイプを指定するインタフェースがありました。</p>

<p><a href="https://github.com/treasure-data/td-client-ruby/blob/master/lib/td/client.rb#L182">https://github.com/treasure-data/td-client-ruby/blob/master/lib/td/client.rb#L182</a></p>

<iframe class="hatenablogcard" style="width:100%;height:155px;margin:15px 0;max-width:680px;" title="td-client-ruby/client.rb at master · treasure-data/td-client-ruby · GitHub" src="http://hatenablog.com/embed?url=https://github.com/treasure-data/td-client-ruby/blob/master/lib/td/client.rb#L182" frameborder="0" scrolling="no"></iframe>


<p>``` ruby client.rb#L182付近 <a href="https://gist.github.com/tchikuba/c1c9e48f88ff7c6d2c94">https://gist.github.com/tchikuba/c1c9e48f88ff7c6d2c94</a> gist
  # @param [String] db_name
  # @param [String] q
  # @param [String] result_url
  # @param [Fixnum] priority
  # @param [Fixnum] retry_limit
  # @param [Hash] opts
  # @return [Job]
  def query(db_name, q, result_url=nil, priority=nil, retry_limit=nil, opts={})</p>

<pre><code># for compatibility, assume type is hive unless specifically specified
type = opts[:type] || opts['type'] || :hive
raise ArgumentError, "The specified query type is not supported: #{type}" unless [:hive, :pig, :impala, :presto].include?(type)
job_id = @api.query(q, type, db_name, result_url, priority, retry_limit, opts)
Job.new(self, job_id, type, q)
</code></pre>

<p>  end
```</p>

<p>上記の通りqueryメソッドの第5引数にoptsというハッシュで指定するオプションがあり、
<code>type: :presto</code>な指定をするとHiveではなくPrestoでクエリが発行されます。</p>

<p>以下、rakeタスクでのサンプルコードです。</p>

<p>``` ruby rakeタスクでのサンプルコード
namespace :execute do
  desc &lsquo;download treasure data by presto&rsquo;
  task presto: :environment do</p>

<pre><code>apikey = 'your api key'
db = 'your_db_name'
query = 'select count(*) from your_table_name'
client = TreasureData::Client.new apikey
job = client.query db, query, nil, nil, nil, type: :presto
until job.finished?
  sleep 2
  job.update_status!
end
job.update_status!
p job.result if job.finished?
</code></pre>

<p>  end
end
```</p>

<p><code>bash 実行
bin/rake execute:presto
</code></p>

<p><code>bash 結果
[[100]] # your_db_name.your_table_nameの件数
</code></p>

<p>上記のように単純なクエリの場合、Hiveだとパフォーマンス的にwebアプリ等から動的に取得するのが
現実的に時間がかかりすぎたクエリでもPrestoであれば動的にデータ取得可能なので利用の幅が広がりますね。</p>

<h2>合わせて読みたい</h2>

<iframe class="hatenablogcard" style="width:100%;height:155px;margin:15px 0;max-width:680px;" title="『Prestoとは何か，Prestoで何ができるか』 - トレジャーデータ（Treasure Data）公式ブログ" src="http://hatenablog.com/embed?url=http://treasure-data.hateblo.jp/entry/2014/07/10/150250" frameborder="0" scrolling="no"></iframe>




<iframe class="hatenablogcard" style="width:100%;height:155px;margin:15px 0;max-width:680px;" title="[Ruby on Rails]td-clientでTreasureDataにQueryを発行する ｜ Developers.IO" src="http://hatenablog.com/embed?url=http://dev.classmethod.jp/server-side/ruby-on-rails/ruby-on-railstd-client_treasuredata_query_issue/" frameborder="0" scrolling="no"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cookpad庄司嘉織氏「何故クックパッドのサービス開発は日々進化しているのか」@デブサミ2014初日を聞いた]]></title>
    <link href="https://tchikuba.github.io/blog/2014/02/13/cookpad-of-developers-summit2014/"/>
    <updated>2014-02-13T18:00:00+09:00</updated>
    <id>https://tchikuba.github.io/blog/2014/02/13/cookpad-of-developers-summit2014</id>
    <content type="html"><![CDATA[<p>引き続き<a href="http://event.shoeisha.jp/devsumi/20140213/session/377/">「何故クックパッドのサービス開発は日々進化しているのか」</a>
を聞いたので内容を共有します。</p>

<h1>profile</h1>

<ul>
<li>庄司嘉織@クックパッド</li>
<li>部長だけどプログラマ</li>
<li>スライド</li>
</ul>


<script async class="speakerdeck-embed" data-id="8cc658a076ac013148646268bd6e389b" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<h1>cookpad</h1>

<ul>
<li>クックパッドはクックパッドだけじゃなくて新規事業もやってますよを覚えておいて</li>
<li>Ruby2.0 Rails3.2 : 絶賛Rails4.0.1へ移行作業中</li>
<li>超絶大規模(スライド参照)</li>
<li>サービス開発40+ / インフラ部5 / 技術部 10+</li>
<li>cookpad本体いじるメンバーは20名程度</li>
<li>Opsはインフラ部の部長のスライドを参照</li>
<li>技術部コミットメントCI10分以内</li>
<li>ユーザを向いたものづくり(スライド)</li>
<li>ほぼ全員デブサミ来てない。2/14バレンタインデーの前日は一番アクセスが多い</li>
</ul>


<h1>サービス開発</h1>

<ul>
<li>Chankoの紹介。cookpadのサービス開発を端的にあらわしているgem。</li>
<li>金曜リリース禁止なので4日でmergeされたコミットが167ある</li>
<li>Github。DBスキーマ変更もプルリクエストで、設計もissuesで。</li>
<li>デザイナーもGithubで</li>
<li><a href="http://blog.monochromegane.com/blog/2013/12/23/lgtm-chrome-extension/">LGTM: looks good to me</a></li>
</ul>


<h1>deploy</h1>

<ul>
<li>時間帯9:30-17:00の間 休日の前日は基本なし</li>
<li>インフラがデプロイロックを開発者にお願いする。インフラが権威的にならないようにする</li>
</ul>


<h1>ユーザーサポート</h1>

<ul>
<li>ユーザーサポートもGithubで</li>
<li>hipchat通知＆エンジニアが見やすい場所</li>
<li>サポートの人はエンジニアに投げた後の進捗が気になるのでGithub利用オススメ</li>
<li>元々違うチケット管理システムをサポートは使用していた。エンジニアさんに迷惑かけちゃいけない的な文化まずい</li>
<li>正しいと思ったら勝手に行動して良い。自分で文化を作れる</li>
</ul>


<h1>文化</h1>

<ul>
<li>DevOps社内ではそれほど意識してなくて後付っぽい感じ</li>
<li>立場の違いに応じて社員ひとりひとりにユーザーがいる</li>
<li>エンジニアの文化が良いと思うなら他の人達にも取り入れてもらう</li>
<li>クックパッドのエンジニアは社外の開発者にも貢献することが求められている</li>
<li>エンジニアの評価基準の一つになっている</li>
<li>文化を作るために気をつける：ルールを作らない。ルールにしない</li>
<li>それが正しいと思ったら行動する</li>
<li>いいだしっぺがやるから問題ない</li>
<li>文化が共有されていればそれでまわる</li>
<li>It&rsquo;s easier to ask forgiveness than it is to get permission.

<ul>
<li>許可求めるより良いと思ったらやった方が早い</li>
<li>cobol開発者の言葉</li>
</ul>
</li>
<li>文化を共有し信頼し実行</li>
</ul>

]]></content>
  </entry>
  
</feed>
