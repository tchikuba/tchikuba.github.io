<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | tchikuba's blog]]></title>
  <link href="http://tchikuba.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://tchikuba.github.io/"/>
  <updated>2019-07-07T01:31:53+09:00</updated>
  <id>http://tchikuba.github.io/</id>
  <author>
    <name><![CDATA[tchikuba]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[イベント「~エンジニア×先生×NPOで語る、これが本当のプログラミング教育~みんなのコードmeetup」に参加してきました]]></title>
    <link href="http://tchikuba.github.io/blog/2018/09/27/minnano-code-meetup/"/>
    <updated>2018-09-27T19:14:24+09:00</updated>
    <id>http://tchikuba.github.io/blog/2018/09/27/minnano-code-meetup</id>
    <content type="html"><![CDATA[<p>2018/09/27(木)に行われたイベント<a href="https://connpass.com/event/100886/">「~エンジニア×先生×NPOで語る、これが本当のプログラミング教育~みんなのコードmeetup」</a>にブログ投稿枠で参加してきました！</p>

<p>私はプログラミング教育には関心が高いのですが、どちらかというと現状は社会人向けの方に現状はコミットしています。</p>

<p><a href="//ck.jp.ap.valuecommerce.com/servlet/referral?sid=3420715&pid=885401979" target="_blank" rel="nofollow"><img src="//ad.jp.ap.valuecommerce.com/servlet/gifbanner?sid=3420715&pid=885401979" height="1" width="1" border="0">TechAcademy [テックアカデミー]</a>という社会人向けのプログラミングスクールでwebアプリケーションコース（Ruby on Rails）の講師（メンター）をやっていたりします。</p>

<p>が、過去、小学校の教員免許状も取得したこともあり、学校教育におけるプログラミング教育にも将来的には関わっていきたいなと思っています。</p>

<p>NPO法人のみんなのコードは、本業のリブセンスでのご縁もあり、以前から知っていましたが、今回のイベントに知人のFacebookエンジニアである安藤さんもパネラーとして参加されるというので、同日行われていたMeguro.rbの参加を見送って、このイベントに参加することにしました。</p>

<h2>小学校プログラミング教育最前線のお話 by NPO法人みんなのコード代表 <a href="https://twitter.com/yutatone">利根川 裕太</a></h2>

<p>最初にアイスブレイクで2人1組になってトランプ5枚のカードを大きい順に並べ替えるゲームで和みました。
ソートアルゴリズムを特にIT機器を通さずに体験するゲームということで、広く言えばこういうものも、プログラミング教育の一環とも言えるのではないかと思いました。</p>

<p>その後、利根川さんからみんなのコードが目指す世界についてアナウンスがありました。
一応紹介しておくと、NPO法人みんなのコードは、プログラミングを教える人を教える活動を行っています。
つまり、教員の方を中心にプログラミング教育の教え方を教えるような感じです。</p>

<p>ご高齢ながらプログラミングを独学で習得して一躍有名人となった<a href="https://www.huffingtonpost.jp/kei-kudo/100-2018-0313_a_23383928/">若宮正子さん</a>などのストーリーを通して、コンピュータを用いて何らかの課題解決をしている事例を紹介されていたのが印象的でした。</p>

<p>私が話を聞きながら疑問に感じたポイントは、プログラミング教育以前に、学校のような比較的伝統ある古い組織において、ITを導入することでより効率的に物事を進めたり、人とつながったりなど、ITの恩恵を受ける体験に実は乏しく、ITが持つ力の大きさみたいなものを教員が実感する必要があるのでは？ということでした。</p>

<p>そのような趣旨で質問してみたところ、プログラミング教育がきっかけになって、学校側のITリテラシーがあがる、という事例も実際に出てきているそうです。</p>

<h2>エンジニア×先生×NPOのパネルディスカッション</h2>

<p>後半からは、以下のパネラーの方々の簡単な自己紹介の後、プログラミング教育に関するパネルディスカッションが行われました。</p>

<h3>パネラーの方々</h3>

<ul>
<li>エンジニア：FacebookエンジニアのAndo氏

<ul>
<li>中学校の社会の教員採用試験も受けた経験あり。</li>
<li>デジタルハリウッドでの講師経験あり。</li>
</ul>
</li>
<li>先生：千葉大学教育学部附属小学校 教諭／ICT活用教育部 主任　小池 翔太氏

<ul>
<li>5年目の小学校教員。</li>
<li>IBM×国立天文台「位置天文学×エンジニア」などのプログラミング教育事例の紹介。</li>
</ul>
</li>
<li>NPO法人みんなのコードCTO：田中高明氏

<ul>
<li>元世界史の教師からエンジニアに転向。</li>
</ul>
</li>
<li>NPO法人みんなのコード主任講師：福田晴一氏

<ul>
<li>和田中学校藤原さん（民間出身の元校長先生）と一緒にやっていた元先生。</li>
<li>余談ですが私は藤原さんが提唱されている<a href="https://logmi.jp/131707">トライセクター・リーダー</a>って考え方に共感してます。簡単にいえば、3つの全く違うそれぞれの分野で100人に1人の人材になり、それを3つ掛け合わせると100万人に1人の人材になれる、というキャリアみたいな感じ。</li>
</ul>
</li>
</ul>


<h3>パネルディスカッション詳細</h3>

<p>詳細と見出しには書きましたけど、ここからは議論が面白くて前のめりに聞くのが中心だったのであまり網羅的にメモできていませんが、個人的に印象に残った議論とその所感を中心に書き起こしておきます。</p>

<h4>実際の教育現場がどうなのか？by福田氏</h4>

<p>福田さんは元先生で、現在はみんなのコードで全国を飛び回って、先生のためのプログラミング教育について研修をされているそうです。いわゆる「プログラミング指導教員養成塾」的なものをされています。</p>

<p>福田さん曰く、全国を回った所感として、「3つの格差」について話をされていたのが印象的でした。</p>

<ul>
<li>自治体の格差</li>
<li>インフラの格差</li>
<li>教員の格差</li>
</ul>


<p>教育に関して、地方は東京から3年くらい遅れて広まっていくところがあり、「公教育の犯罪」とまで言及されていました。</p>

<p>以前からも流行り廃りみたいなものは、東京から広まっていくのはあったと思いますけど、単なる流行はSNSなどインターネットが普及する昨今では、地方に広まっていくのもかなりのスピード感あるなぁという印象があります。恐らく、インターネットの恩恵を享受しにくいサービスみたいなものは、やはり東京一極集中というのはある気がします。</p>

<p>学校の先生方にプログラミング教育の必要性を訴えるには、求められる背景の理論武装が必要だけど、一度理解してもらえればちゃんと堅実に推進してくれるという話は印象的でしたね。私もその昔、教育実習に行ったことがありますが、確かに教育の現場って理屈っぽい先生方多かった印象ありますね。理屈っぽいという意味では、エンジニアも同類項ですがｗ</p>

<h4>学級経営にも生きるプログラミング教育by小池氏</h4>

<p>プログラミングで求められる自発性みたいなものがあり、たとえば、アイルランドから始まった<a href="https://coderdojo.jp/">CoderDojo</a>では、あまりトップダウン的なアプローチで何かを強制的にさせることは行いません。あくまでも子どもたちの自主性にまかせてやることを決めるので、一人ひとりの個性が大切にされます。</p>

<p>同じような流れで、一度プログラミング教育を経験した子どもたちが、プログラミング教育以外の分野でも、ボトムアップ的なアプローチで色々と試行錯誤し出す、ということがあり、これは大きなメリットの1つであると小池さんが言ってました。</p>

<p>本来、「教育とは子どもたちの個性に合わせてある」というのが持論ですが、どこかで横並びの画一性みたいなものが管理上求められる部分もあるので、この矛盾とどう戦って行くのかが重要だなと個人的には思いました。子どもたちに合わせるなら、個人指導みたいなのがベストだけど、現状の公教育は集団授業前提なので、なかなか子どもたちそれぞれに合わせていられない部分はあると思います。</p>

<h4>プログラミング教育のデメリットは？by安藤氏</h4>

<p>公教育にはほぼすべての大人が子どもの頃に経験したもので評価してしまうけど、実は最新の公教育がどうなっているのか？という実態を把握している人はそう多くないです。だからこそ、安藤さんはプログラミング教育についても「知ったかぶりする人が多い印象」という表現をされていたのが印象的でした。</p>

<p>安藤さんは前述のCoderDojoでも子どもたちに教えた経験があります。教育の現場として、「IE（ブラウザ）を開くのに15分かかる」「キーボードで入力すると急激にハードルがあがる。"こんにちは"と入力するのに1分かかったり」と事例はなるほどなぁという感じでした。個人的にはいい加減、キーボードに変わるより直感的な入力デバイスが必要な気がしていますが。誰かベンチャーでやらないかなｗ現状だと音声入力の精度がかなり向上している感ありますが、どうもプログラミングの入力となると記号などが多いので難しそう。音声入力専用のプログラミング言語とか作れば良いのかしら。</p>

<p>話がそれました。</p>

<p>いずれにしても、公教育におけるプログラミング教育は、そのハードルをかなり下げる必要があるという主張は共感できました。確かに、野球やサッカーの競技人口の裾野は広がっていますが、だからといってみんながプロの選手になる訳ではないです。プログラミングも同様で、職業エンジニアに求められるハードルと混同してはいけないと思います。</p>

<p>「議論のすれ違いー」</p>

<p>このように安藤さんは表現していましたが、私もまったく同感で、ポジショントークによるものが大きい気がしています。産業界ではいわゆるホワイトカラーの仕事が増えていて、かけた時間と成果が一致しない類の質が求められるようになってきています。この流れの中で、プログラミング的思考が求められることが少なくありません。それでなんとなく一斉に「これからはプログラミング教育の時代だー！」みたいな温度感高めの人たちが一定増えているのが現状かなとも思います。</p>

<p>この話を書いていて思い出したのが、サイバーエージェント系列の<a href="https://techkidsschool.jp/">CA Tech Kids</a>の代表とCA藤田さんとの対談の<a href="https://forbesjapan.com/articles/detail/20482">この記事</a>です。この記事の後半に出てくるのですが、プロ野球と同じように、高校生向けのドラフト会議のエンジニア版をやるというのが興味深いなぁと。こんな感じで、エンジニアとしてのエリート教育もあって良いと思います。大事なのはダイバーシティですね。野球でもサッカーでも、だいたい日本代表レベルで活躍する人って、地域のリトルリーグとかそういうのやってましたよね。ガチ勢は意外と学校の部活とかやんない感じでした。そんなノリでプログラミング教育も浸透すると良いのかなぁと思います。</p>

<h4>プログルの紹介by田中氏</h4>

<p>公教育におけるプログラミング教育のハードルを下げる取り組みとしてみんなのコードとして取り組んでいるのが、<a href="https://proguru.jp/">プログル</a>です。これはプログラミング教育における定番Scratchっぽいものですね。</p>

<p>イベント当日は、自治体別アクセスランキングなどを見せてもらいましたが、全国からアクセスされて使われていました。</p>

<p>Scratchもそうですが、これ系のやつって子どもたちにやらせるとみんな総じて「楽しかったー！またやりたい！」ってほぼなるんですよね。この満足度はやりがいあって良いなと。うがった見方ばかりしかできない大人にはならないように気をつけましょう（違）。</p>

<h2>プログラミング教育に対する私見</h2>

<p>既に所感もあわせて記述したのでその通りですが改めて。</p>

<p>どの目線で話をするのか、というのが一番大きいですね。やはりプロのエンジニアになるためのプログラミング教育と、プログラミング的思考を養ったり、プログラミング教育の出会いの場を提供するという公教育では役割が違って当然です。2020年小学校教育でプログラミング教育が必修化されるとか、センター試験で科目化されるとかの時代の流れもあって、このあたりの棲み分けが現状カオスになっている印象はあります。</p>

<p>何事も活動が広まっていくプロセスにはカオス期というのは避けて通れないので、あと5-10年くらいかけてもっと洗練されていくのかなと思います。公教育の体育の授業でソフトボールや野球をやるのと、リトルリーグに所属した人がプロ野球選手になるプロセスに文句いう人がいないように、プログラミング教育が自然になっていく時代がやってくるのは間違いないでしょう。</p>

<p>私はエンジニアなので、日本が少子高齢社会の中で高い生産性を保ってより高い価値ある仕事を創造していくには、プログラミング教育は何かしら必須であると考えているので、そのうち時代がやってくるさ♪という傍観者ではなくて、何かしらプログラミング教育へのコミットメントを増やしていきたいです。</p>

<p>頑張ります！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【書籍レビュー】超入門シリーズ本を献本頂きました]]></title>
    <link href="http://tchikuba.github.io/blog/2017/12/11/super-getting-started-books/"/>
    <updated>2017-12-11T19:47:03+09:00</updated>
    <id>http://tchikuba.github.io/blog/2017/12/11/super-getting-started-books</id>
    <content type="html"><![CDATA[<p><a href="/blog/2017/05/22/ruby-on-rails-5-application-programming/">前回</a>に引き続き、WINGSプロジェクトが監修し、技術評論社から出版されている超入門シリーズ本を以下の3冊献本して頂きました。</p>

<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/B071GQQDNM/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071GQQDNM&linkCode=as2&tag=athome0a-22&linkId=31b2a479600687cd2a87420281ca995e"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=B071GQQDNM&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=athome0a-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071GQQDNM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/B071X8SKXN/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071X8SKXN&linkCode=as2&tag=athome0a-22&linkId=ec260d486540778f7bdc4f8fdd0cebfb"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=B071X8SKXN&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=athome0a-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071X8SKXN" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/B071GTJSPL/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071GTJSPL&linkCode=as2&tag=athome0a-22&linkId=fcb1d876a5f5de8815781b325db0b4d6"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=B071GTJSPL&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=athome0a-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071GTJSPL" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>それぞれの本についてレビューをば。</p>

<p>※関係者の方々、対応が遅くなり申し訳ありません。。</p>

<hr />

<h2>【書評】<a target="_blank" href="https://www.amazon.co.jp/gp/product/B071GQQDNM/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071GQQDNM&linkCode=as2&tag=athome0a-22&linkId=942c9cecdc280376dec9ed521cf1406c">たった1日で基本が身に付く！  HTML&amp;CSS超入門</a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071GQQDNM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h2>

<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/B071GQQDNM/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071GQQDNM&linkCode=as2&tag=athome0a-22&linkId=31b2a479600687cd2a87420281ca995e"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=B071GQQDNM&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=athome0a-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071GQQDNM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<h3>webサイトとはそもそもなんぞや？という点からちゃんと解説されている</h3>

<p>超入門書なだけあって、そもそもwebサイトがサーバーに設置されていてブラウザなどのクライアントからアクセスして読み込むものだ、的な基礎的な部分からちゃんと解説されています。
また、技術的側面だけでなく、webサイトを設置する目的やどう設計するか？についてもちゃんと触れられている点が素晴らしいです。</p>

<h3>HTML5をベースとしたセマンティックwebが意識されている</h3>

<p>超入門書といえど、headerタグやfooterタグなどを通してセマンティックwebについて早い段階でちゃんと解説されています。</p>

<h3>CSS（Cascading Style Sheets）の基本がしっかり理解できる</h3>

<p>CSSの発展の歴史を紹介していたり、HTMLタグをwebページの装飾目的で使うことを戒めたりなど、経験あるwebサイト制作者の方の言葉が散りばめられている辺り、好感が持てる印象でした。</p>

<p>あと、私自身はサーバーサイドエンジニアなのでHTMLとCSSはなんとなくのフィーリングで理解しているところもあったので、例えばボックスモデルなどは恥ずかしながらmargin, border, padding辺りの違いについての認識が甘いところがあります。その辺りがちゃんと体系的に再確認できたのは良かったです。</p>

<p>同様の理由で、段組みレイアウトの辺りの解説もまた、何がブロックレベル要素で何がインライン要素なのかとかあまり意識できてなかったり、フロートレイアウトなどもフィーリングで理解していたところがあったので正直勉強になりました。</p>

<h3>レスポンシブデザインに対応している</h3>

<p>最近では必須のレスポンシブデザインに対応しており、具体的にはスマートフォン対応する具体的な方法についても解説されています。
私自身、メディアクエリとかちゃんと理解できてなかったところがありました。。</p>

<h3>総評</h3>

<p>本書を一通りなぞれば、コーヒーショップのレスポンシブなホームページのサンプルを制作することができます。
本書を足がかりにすれば、<strong>読者は基本的なwebデザインのうちHTML・CSSコーディングができるようになる</strong>と思います。</p>

<p>その意味で本書は良書だなーと思いました。</p>

<p>また、私みたいにサーバーサイドエンジニアが本業なんだけど、フロントエンドはそこまで詳しくないけどちゃんと体系的にイチからインプットしたい、というモチベーションがある人には刺さるかもしれません。
とはいえフロントエンドもある程度できるエンジニアにはちょっと物足りないかもしれませんが。</p>

<p>余談ですが、<em>「本業サーバーサイドエンジニアに贈る基礎から学ぶフロントエンド」</em>的な書籍があったら実はニーズあるんじゃないかと思いましたｗ</p>

<h2>【書評】<a target="_blank" href="https://www.amazon.co.jp/gp/product/B071X8SKXN/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071X8SKXN&linkCode=as2&tag=athome0a-22&linkId=9d4e7a69fed84321916b7baa8a77ebad">たった1日で基本が身に付く！  JavaScript超入門</a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071X8SKXN" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h2>

<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/B071X8SKXN/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071X8SKXN&linkCode=as2&tag=athome0a-22&linkId=ec260d486540778f7bdc4f8fdd0cebfb"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=B071X8SKXN&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=athome0a-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071X8SKXN" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<h3>webアプリケーションとはなんぞや？についてちゃんと解説されている</h3>

<p>超入門シリーズ本にはおなじみですが、ターゲット読者層がプログラミング未経験者なので、そもそもwebアプリケーションってなんだっけ？とかサーバーサイド、クライアントサイドの違いみたいな基礎的なところから解説が始まります。</p>

<p>執筆者の立場として個人的に思うのですが、このあたりの解説ってすんなり説明するのが意外に難しいところだったりします。
どこまで歴史的な背景やバックグラウンドを説明するのかとか。</p>

<p>このあたりの部分、前半部分での説明が超入門者向けにも過不足なく非常に分かりやすいのではないかと思います。</p>

<p>また、JavaScriptでできることの幅が広がりつつある昨今ですが、その辺りにも触れつつ、本書でカバーする範囲をクライアントサイドのwebアプリケーション機能開発に特化していると明記していることもわかりやすさを担保することに繋がっている気がします。</p>

<h3>イベントやAPI、WebStorageについて扱っている</h3>

<p>超入門者向けでも、JavaScriptによるwebアプリケーションの基礎としてイベントドリブンモデルについて解説されています。
本書はwebアプリケーション前提なので、JavaScriptを語る上で密接に関わってくるイベントについて1つの章を割いて解説を加えているのかもしれません。</p>

<p>後半の章では、Flickr APIを用いて画像検索するアプリ作成を行っており、より実践的な内容になっています。
更に、Webstorageについても触れられており、こちらもAPI同様、より実践的な内容かなという印象です。</p>

<h3>Windows環境にApacheインストールの辛い</h3>

<p>これも超入門シリーズ本全般で辛いところではありますが、環境構築でWindowsを前提とするツラミはちょっとあるかなと。
webアプリケーションにおけるJavaScriptというところで、Apacheのインストールは避けられなかったかもしれませんが。</p>

<h3>オブジェクトがいきなり出てくる</h3>

<p>超入門者にとって、前半の早い段階でオブジェクトという概念がいきなり出てくるのでちょっとギョッとするかもしれません。
JavaScriptの性質上、しょうがない側面も大きいかなと思いつつ。。</p>

<h3>総評</h3>

<p>全体的にプログラミング言語としての側面からJavaScriptを論じるというより、<strong>より実践的なwebアプリ開発を行う手段としてのJavaScriptを紹介した書籍</strong>という印象を受けました。</p>

<p>プログラミングを全く学習したことのない人向けにしては、プログラミングの基礎的な部分、例えば3大制御構造などについて体系的な解説がそれほど多くなかった印象だったので注意が必要かもしれません。</p>

<p>逆に、<strong>JavaScriptを使って具体的にどういうアプリが作れるのか？という点にフォーカスしたい方にとっては良書</strong>と言えそうです。</p>

<h2>【書評】<a target="_blank" href="https://www.amazon.co.jp/gp/product/B071GTJSPL/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071GTJSPL&linkCode=as2&tag=athome0a-22&linkId=f6e7a1ddc17c34e523450926d9863f48">たった1日で基本が身に付く！ Java超入門</a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071GTJSPL" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h2>

<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/B071GTJSPL/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B071GTJSPL&linkCode=as2&tag=athome0a-22&linkId=fcb1d876a5f5de8815781b325db0b4d6"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=B071GTJSPL&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=athome0a-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=athome0a-22&l=am2&o=9&a=B071GTJSPL" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<h3>コンパイルエラーなど基本的な部分が紹介されている</h3>

<p>超入門向けらしく、半角スペースをなくすとコンパイルエラーが発生するなど超入門者向けの内容がちゃんと解説されています。</p>

<h3>（凄い細かい話ですが）nullの正しい発音がコラムにｗ</h3>

<p>nullは英語では「ナル」と発音するそうです。nullの紹介のところでコラムとして「正しく発音しましょう」って紹介がありました。
ちなみに私は普段「ヌル」と発音してます。スミマセン！</p>

<h3>二重ループが取り上げられている</h3>

<p>プログラミング初心者にとって最もつまづきやすいのがループと言われます。
ループを取り扱う章の最後に、本書ではループ処理がネストしている二重ループについて取り上げられています。
これはプログラミング初心者にとっては有り難い解説かもしれません。</p>

<p>同様に、配列の章の後半で配列とループ処理、ループ処理と条件分岐の組み合わせについても取り上げられており、二重ループ同様、プログラミング初心者にとってはプログラムが複雑になる過程をちゃんと説明してくれていて理解の助けになりそうだなと思いました。</p>

<h3>クラス解説で後半2章分割かれている</h3>

<p>クラスの基礎について1章分、クラスの利用について1章分を割いており、クラスに関する解説はかなりページ数を割いている印象です。
このあたりはそもそも扱っている内容が重いせいか、その他の章の解説に比べて超入門者がページをまたいであちこちに行ったり来たりして理解を深める必要があるように感じました。</p>

<p>このあたりをプログラミング初心者に分かりやすく解説できる自信は正直私もないのですが（汗）</p>

<h3>総評</h3>

<p>総合的に見て、<strong>プログラミングが全く初めての人にとって、Javaを学習する目的で本書は向いている</strong>と思います。</p>

<p>ただ、個人的には<strong>そもそも「オブジェクト指向」という概念がプログラミング初心者には分かりづらい気がするのでその点をどうフォローするか、というのはある意味プログラミング教育の永遠のテーマと言える</strong>かもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 2日目 Matz基調講演＋α]]></title>
    <link href="http://tchikuba.github.io/blog/2017/09/19/ruby-kaigi-2017-the-2nd-day/"/>
    <updated>2017-09-19T09:49:45+09:00</updated>
    <id>http://tchikuba.github.io/blog/2017/09/19/ruby-kaigi-2017-the-2nd-day</id>
    <content type="html"><![CDATA[<p>RubyKaigi 2017は広島での開催。昨年は京都で今年は広島ということで、暫く地方の流れなのかしら？</p>

<h2>Keynote : Yukihiro &ldquo;Matz&rdquo; Matsumoto @yukihiro_matz</h2>

<ul>
<li>世界最大規模のRubyカンファレンスがRubyKaigi

<ul>
<li>何を話すか困る</li>
<li>松田さんには聴衆置いてきぼりでも良いので聞いたこと無い話、技術的な話してよとオファー来る</li>
<li>才能の話をする</li>
<li>天才プログラマーと言われるけど自分でそう思ったことはない</li>
<li>自称プログラミング言語デザイナ</li>
<li>matzが初めて触れたプログラミング言語はBasic</li>
<li>自分の思考をまとめるツール=プログラミング言語</li>
<li>I love all programming languages.</li>
<li>「matzは他の言語に攻撃的だから嫌い」と言われることがある</li>
<li>Rubyのmatzだから他言語を貶めてRubyアゲようとしてる、と言われるけど本人全くそんなつもりはない</li>
<li>とはいえ昔Pythonのメーリスに乗り込んでRubyならこんなことできるよと言ったこともあるけど(笑)</li>
</ul>
</li>
<li>Simula(1968)：初のオブジェクト指向言語の話を</li>
<li>Animal &ndash; Horse &ndash; Zebraが表現できるように</li>
<li>Dr. Kristen Nygaard（クリステン・ニゴール）</li>
<li>「全てのオブジェクト指向言語は私の孫みたいなもんでなぁ」←会った時言われた</li>
<li>単一継承（木構造）→多重継承（ネットワーク構造）</li>
<li>C3リニアリゼーションアルゴリズム</li>
<li>Mixin（Lisp界隈はFlavorsと呼んでた）</li>
<li>アイスクリームとチョコチップのたとえ</li>
<li>Rubyはこれをmoduleとして採用</li>
<li>namespace（ex.Net::HTTP）／singleton（ex.FileUtils）／メソッドの集合（ex.Math）としてのmoduleも</li>
<li>2013年2.0から新たな機能</li>
<li>Alias method chain：欠点もある→Module#prependがRailsコミュニティから複数人から提案があった</li>
<li>一度prependしたら外せないようにするのは敢えて→待てよ</li>
<li>CLOS（Common Lisp Object System）という言語を想起</li>
<li>アスペクト指向プログラミングといっても良い（Gregor Kiczalesが考えた）</li>
<li>リファインメントとしてのmodule</li>
<li>なぜモンキーパッチングというのか？</li>
<li>ゲリラ→ゴリラ→モンキーになったっぽい</li>
<li>ActiveSupportがモンキーパッチングの良い例</li>
<li>2.days.ago（これRubyかよ）ってのができるようになる</li>
<li>スコープを区切ったモンキーパッチングなら良いのでは</li>
<li>Selector namespace （Smallscript）</li>
<li>Rubyのリファインメント

<ul>
<li>C#のエクステンションみたいな→ex.RSpec：特定のスコープだけで呼ぶ（現時点でリファインメント使ってない）</li>
<li>既存のメソッドを置き換える</li>
</ul>
</li>
<li>Structual type checkとしてのmodule（まだプロポーザル）

<ul>
<li>静的型付けとして将来的には取り込まれる可能性</li>
</ul>
</li>
<li>Ruby3x3への取り組み

<ul>
<li>MJIT</li>
<li>Rubex</li>
<li>Fiber / Guild</li>
<li>AutoFiber（Unicorn作った人）</li>
</ul>
</li>
<li>静的型付けの取り組みも本日午後に3発表あり</li>
<li>Matzが手を動かすというよりゴールを示すリードデザイナ</li>
<li>RubyはMatzの言語というより我々の言語</li>
<li>ご覧のスポンサーの提供でお送りしています(笑)ブースに行ってくれると私の顔が立つ

<ul>
<li>Heroku</li>
<li>VASILY</li>
<li>Sansan</li>
<li>Speee</li>
<li>RakSul</li>
<li>リクルートマーケティングパートナーズ</li>
<li>Linkers</li>
</ul>
</li>
</ul>


<p>こっから先は話聞くのをメインにしてたので細かくはメモとってなかったので気になる所だけ…</p>

<h2>An introduction and future of Ruby coverage library : Yusuke Endoh @mametter</h2>

<ul>
<li>カバレッジの種類にも色々ある

<ul>
<li>条件true/false両方をカバー</li>
<li>LINEカバレッジだと後置ifなど見逃すケースも</li>
</ul>
</li>
<li>カバレッジをゴールにするのはよくない</li>
<li>SimpleCovはcoverage.soのラッパー</li>
</ul>


<h2>Improve extension API: C++ as better language for extension : Kouhei Sutou @ktou</h2>

<ul>
<li>高速化の為にはC/C++とRubyを行ったり来たりしないこと</li>
<li>C++11

<ul>
<li>型推論auto</li>
<li>ラムダ式</li>
</ul>
</li>
<li>遅延メソッド定義</li>
</ul>


<h2>Automated Type Contracts Generation for Ruby : Valentin Fondaratov @rubymine</h2>

<ul>
<li>JetBrainsの中の人の静的解析の話</li>
<li>RubyMineの各プロジェクトのテストコードをクラウド化して情報集める的な（たしか）</li>
</ul>


<h2>Type Checking Ruby Programs with Annotations : Soutaro Matsumoto @soutaro</h2>

<ul>
<li>ずっと前から色々型チェック関連やってる人</li>
<li><a href="https://github.com/soutaro/steep">Steep</a></li>
</ul>


<h2>Bending The Curve: Putting Rust in Ruby with Helix : Godfrey Chan @chancancode / Terence Lee @hone02</h2>

<ul>
<li>Herokuの中の人＆もうすぐ中の人（デカい外人もHerokuの中の人）</li>
<li>RustでRubyのライブラリ作ろう的な <a href="https://github.com/tildeio/helix">https://github.com/tildeio/helix</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[イベント「非エンジニア起業家に求められるプログラミングスキルとは」に参加しました！]]></title>
    <link href="http://tchikuba.github.io/blog/2017/07/19/programming-skils-for-entrepreneur/"/>
    <updated>2017-07-19T19:00:00+09:00</updated>
    <id>http://tchikuba.github.io/blog/2017/07/19/programming-skils-for-entrepreneur</id>
    <content type="html"><![CDATA[<p>昨晩<a href="http://everevo.com/event/39414">「非エンジニア起業家に求められるプログラミングスキルとは」</a>
というイベントに参加してきました。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">久々サムライインキュベートなう <a href="https://t.co/H9RSzbhKfQ">pic.twitter.com/H9RSzbhKfQ</a></p>&mdash; Tsutomu Chikuba (@tchikuba) <a href="https://twitter.com/tchikuba/status/887250994463203328">2017年7月18日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>私はエンジニアで本来参加対象者って感じではないんですが、参加した目的は以下でした。</p>

<ul>
<li>参加者がエグゼクティブ向けプログラミング教育のターゲットとなる可能性のある人なので、話してニーズがあるかを確認する</li>
<li>起業家にどれだけプログラミングスキルが求められる温度感なのか確認する</li>
<li>今進めているプログラミング教育メディアの構想の壁打ちをしてみる</li>
</ul>


<hr />

<p>目的は概ね達成できたかなと思っています。
参加者の中で実際にニーズを持っていそうな人・ペルソナが特定できなかった部分はちょっと課題。</p>

<p><a href="http://www.officedeyasai.jp/">OFFICE DE YASAI</a>というサービスを運営している
株式会社KOMPEITOのCEOの川岸さん(登壇者)と話して感じたんですが、
ある程度ステージが進んだエグゼクティブだとより短期的な成果を求めるのでどこまで何が良くなるのか？
ということを提示できないとニーズを掘り起こすのが厳しそうだということ。</p>

<p>また、その意味ではよりアーリーステージの起業家の方がニーズがあるのかもしれないと思いました。
ただ、アーリーステージ起業家の場合だと、本人がプログラミングスキルそのものを身に付けるという話なので、
その意味では私が想定するエグゼクティブ向けプログラミング研修とは違うかも。</p>

<p>全体的にエンジニアの私にとってはそれほど真新しい話はなかったんですが、
サムライインキュベートが支援するようなサービス開発のベンチャーは基本的に起業家がプログラミングできることか
チームにエンジニアがいることが支援の条件でやはりアメリカ同様プログラミングスキルに対する
ビジネス評価の温度感は高いです（当然か）。</p>

<hr />

<p>あとは以下、昨晩のメモと感じたことを箇条書きで記しておきます。</p>

<ul>
<li>アメリカにはプログラミングスクール女子校がある</li>
</ul>


<p>女性向けサービス開発を行う上で女性の感性が必要なので女性がプログラミングスキルを身に着けて起業家になる女子校があるそう。
嫁に運営やらせたら面白いかも？とちょっと思いました。
こういうニッチに特化した方が集客しやすい側面がありそう。</p>

<ul>
<li>エンジニアを起業家にする教育を施す学校のニーズは一定あるかも？</li>
</ul>


<p>登壇していた<a href="http://gsacademy.tokyo/">G’sアカデミー</a>も起業家向けのプログラミング教育を行ってますが、
むしろエンジニア界隈で最近主流になってきているプロダクトマネージャーの流れで、
エンジニアを起業家にする方が筋が良い場合があるのでは？と思いました。</p>

<p>その延長線で、エンジニアを起業家にする教育を施す起業家養成学校をやったらニーズはありそうな気がしたんですがどうでしょう。</p>

<ul>
<li>和田さん曰く「プログラミングとエンジニアリングは分けて考えている」</li>
</ul>


<p>最低限動くモノづくりができるというプログラミングと、より良い設計やコードといった高度なエンジニアリングとは分けて考えている、
ということ。
CEOはプログラミングはできるべき、エンジニアリングまでは必要ない、とのこと。この主張は分かりやすく共感できた。</p>

<ul>
<li>G'sアカデミー児玉さん曰く「スクールの立ち上げに複数関わってきた経験から言えば、集客は難しい。良い講師を揃えれば生徒が集まるかというとそうでもなく工夫が必要」</li>
</ul>


<p>直感的に経験からの重い言葉と理解しました。
個人的にはスクール立ち上げの経験がないので実感としてはまだ分からないですが、
恐らくスクールに参加しようと思わせるマーケティングが必要だということと理解しました。</p>

<hr />

<p>現在少しずつ実験的に開発を進めている<a href="https://www.grami-sensei.com/">プログラミング教育メディア</a>の構想は筋は悪くなさそうという感触は得られました。ただ、ターゲットとなるペルソナは今回のイベントの参加者とはちょっとズレがあるのでその点は考慮が必要で引き続きヒアリングを進める必要がありそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【速報】RubyKaigi 2016初日参加レポート]]></title>
    <link href="http://tchikuba.github.io/blog/2016/09/08/rubykaigi2016-1st-day/"/>
    <updated>2016-09-08T10:17:39+09:00</updated>
    <id>http://tchikuba.github.io/blog/2016/09/08/rubykaigi2016-1st-day</id>
    <content type="html"><![CDATA[<p>聞きながらの自分用メモなのでちょっと正確でない点がありそうですが。</p>

<h2>Ruby3 presented by matz</h2>

<ul>
<li>Typingの話</li>
<li>SmallTalk→Java→Ruby,JavaScript→Swift,Go→？</li>
<li>近視眼的な判断で静的型付けを選択するのは危険</li>
<li>そもそも未来の型とは？</li>
<li>Duck typing: アヒルが歩くように。アヒルのように振る舞えばOK</li>
<li>Duckとは期待される振る舞い</li>
<li>プログラマのメンタルコストを下げたい</li>
<li>GoのStructual SubtypingはNominal Subtypingより良さ気</li>
<li>Rubyには歴史的にこれまで型指定がない</li>
<li>動的型付けの欠点もある</li>
<li>エラーメッセージが親切じゃない</li>
<li>型は絶対に書きたくない(会場笑) DRYじゃないし</li>
<li>Type Annotation,Mixed/Gradual Typingはダメなアイディア</li>
<li>人にお願いするんじゃなくて技術で解決したいよね</li>
<li>型推論は素晴らしい</li>
<li>インタフェース書きたくない</li>
<li>型の名前を決めるのは結構なコスト。振る舞いがわかっていれば名前を付けたくない</li>
<li>振る舞いを決める型のデータベースのようなものと型推論を組み合わせると80%くらいは推論可能では</li>
<li>オープンクラスとかで再定義しちゃうと型推論無効に</li>
<li>型データベースをgem化して利用して型推論の精度向上とか</li>
<li>ダックタイピングを維持して型推論をRubyらしく行う</li>
<li>これらの構想はすべてRubyistが楽しく生産性を維持できるために検討していること</li>
<li>Ruby3はいつか？ I don&rsquo;t know.(会場笑)</li>
<li>次の東京オリンピックの時にはRuby3あると良いなぁ</li>
<li>OSSコミュニティは前に進めないとつまらない。前に進めるためには何でもやる</li>
</ul>


<h2>dRuby presented by @m_seki</h2>

<ul>
<li>dRubyが生まれたのは1999年</li>
<li>dRubyはオーパーツ</li>
<li>shttpsrv: WEBrickより前のRuby製webサーバ</li>
<li>Rubyのように振る舞う分散オブジェクト</li>
<li>DRb.start_serviceだけでdRubyの準備可能</li>
<li>サーバーとクライアントが入れ替わる例</li>
<li>OOPっぽい感じ</li>
<li>Queueを使って待合せのデモ</li>
<li>dRubyはtwitterのプロトタイピングでdRuby/Rindaだったらしい</li>
<li>プロトタイピングとしての利用価値がある気がする</li>
<li>セキュリティ系メソッドは消してしまいたい。危ないものは危なく見えるべき</li>
</ul>


<h2>Welcome to haconiwa presented by @udzura</h2>

<ul>
<li>Drone.io</li>
<li>dockerらしいコマンドをしょっちゅう打ってた</li>
<li>Sqaleで使ってるLXC</li>
<li>haconiwaコマンドでRubyで書かれたプロファイル定義を実行とか</li>
<li>hacorbコマンドとかでmrubyスクリプトのコンテナ実行</li>
<li>cgroups的な</li>
<li>最初はCRubyで実装</li>
<li>システムコール扱うのに色々嵌ったのでmruby実装へ</li>
<li>mrubyはコンテナが取り扱うシステムコールをサポートしてるので使いやすい</li>
</ul>


<h2>A proposal of new concurrency model for Ruby 3 presented by @ko1</h2>

<ul>
<li>資料

<ul>
<li><a href="http://www.atdot.net/~ko1/activities/2016_rubykaigi.pdf">スライド</a></li>
<li><a href="http://www.atdot.net/~ko1/diary/201609.html#d6">日本語スクリプト</a></li>
</ul>
</li>
<li>Ruby 3に取り入れられたいと思う並列プログラミングについて</li>
<li>C言語のポインタと比較するとRubyはGCあるのでハッピープログラムできる</li>
<li>data raceやrace conditionが発生する例を通してスレッドセーフなプログラミングが如何に難しいかを知る</li>
<li>Mutexを利用して同期を取るのはバグと性能低下の狭間にある</li>
<li>Ruby 3ではGuild(ギルド)というスレッドにかわる新たな概念を提案</li>
<li>Guildは複数スレッドを含む上位概念的なもの</li>
<li>複数のGuild間での可変オブジェクト受け渡しにはチャネルを使ってコピーするか移籍(transfer membership)という新しい概念で</li>
<li>Guild内のスレッド間はスレッドセーフが保証される</li>
<li>これらのGuildの概念でRuby 3で実現したい並列プログラミングのゴールをすべて満たす感じに</li>
<li>Guild概念導入でスレッドセーフが保証されないキモいコードを書けないようにする方向性</li>
</ul>


<h2>Isomorphic web programming in Ruby presented by @youchan</h2>

<ul>
<li>去年はHyaliteの話をした</li>
<li>Menilite: クライアントサイドでもARとか使える的な(JS嫌いなのでw)</li>
<li>デモ、デモ、ひたすらデモ</li>
</ul>


<h2>Unifying Fixnum and Bignum into Integer presented by @tanaka_akr</h2>

<ul>
<li>Ruby 2.4ではFixnum,BignumクラスがなくなりIntegerに統合</li>
<li>環境によってFixnumが扱えるサイズは異なる

<ul>
<li>手元の環境(OS X Yosemite)だと(2<strong>62-1).classはFixnum,(2</strong>62).classはBignum</li>
</ul>
</li>
<li>Fixnum,BignumはCommon Lispから来てる</li>
<li>以下のコード無限ループになるけど許容するしか。
max = 1
max *= 2 if max.class == Fixnum
puts max</li>
<li>教育的に分かりやすい、数学的にも正しい、とmatzに押し込んだ</li>
</ul>


<h2>Scalable job queue system built with Docker presented by @k0kubun</h2>

<ul>
<li>coockpadでrails開発者の開発効率を向上する為の開発</li>
<li>RubyKaigiでrailsの話をすると怒られる</li>
<li>syoryukenってgemはSQSをジョブキューとして使うやつ</li>
<li>barbequeを作った</li>
<li>web consoleもあるよ(rails製)</li>
<li>kuroko2という社内のクローズツールが秀逸すぎたので本来ジョブキュー使うべきところでも出番なし</li>
<li>kuroko2はOSS化進めてる</li>
<li>ECSとAutoScalingグループでスケールを自動化</li>
</ul>

]]></content>
  </entry>
  
</feed>
